/**
 * This is the Game of Life. Each cell has a state: alive (#) or dead (.). 
 * The number of alive cells is randomly selected at the start of the game.
 * The state of the cells changes each generation. If an alive cell has 2 
 * or 3 alive cells next to it, it stays alive. If it has 1, 0, or 4 or more 
 * cells next to it, it will die. A dead cell comes alive when there are 3 alive
 * cells next to it.
 * 
 * Author: Zach Brough
 * Version: 1.7.2023
 */
import java.util.Random;
import java.util.Scanner;
import java.util.InputMismatchException;

public class GameOfLife {
    // Variables. If you want to change maxInput go to line 121
    private int width; // Width of the board
    private int height; // Height of the board
    private boolean[][] cells; // Game board of the cells

    // Creates a 2-dimensional array representing the game board
    public GameOfLife(int width, int height) {
        this.width = width;
        this.height = height;
        cells = new boolean[width][height]; // Sets game board width and height
        
    }

    // Randomly generates cells at the start
    public void initializeRandom() {
        Random rand = new Random();
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                cells[x][y] = rand.nextBoolean();
            }
        }
    }

    // Prints the board
    public void display() {
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                System.out.print(cells[x][y] ? '#' : '.');
            }
            System.out.println();
        }
    }

    // Toggles cell states
    public void toggleCellState(int x, int y) {
        if (x >= 0 && x < width && y >= 0 && y < height) { // Checks the cell coordinates are valid
            cells[x][y] = !cells[x][y];
        } else {
            System.out.println("Invalid cell coordinates!");
        }
    }

    // Advances a generation
    public void advanceGeneration() {
        boolean[][] newCells = new boolean[width][height]; // Makes a new cells array
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                int liveNeighbors = countLiveNeighbors(x, y);
                if (cells[x][y]) {
                    // Cell is alive
                    if (liveNeighbors == 2 || liveNeighbors == 3) {
                        // Cell lives on
                        newCells[x][y] = true;
                    }
                } else {
                    // Cell is dead
                    if (liveNeighbors == 3) {
                        // Cell becomes alive
                        newCells[x][y] = true;
                    }
                }
            }
        }
        cells = newCells; // Copies newCells array into the normal cells array
    }

    // Counts live neighbors
    public int countLiveNeighbors(int x, int y) {
        int count = 0;
        for (int dx = -1; dx <= 1; dx++) { // dx scans the x-axis around the cells. dx means delta x because this measures the change between the 2 variables
            for (int dy = -1; dy <= 1; dy++) { // dy scans the y-axis around the cells.
                if (dx == 0 && dy == 0) {
                    // Ignore the current cell
                    continue;
                }
                int nx = x + dx; // Update the next x variable (nx)
                int ny = y + dy; // Update the next y variable (ny)
                if (nx >= 0 && nx < width && ny >= 0 && ny < height && cells[nx][ny]) { // Checks if cell is alive
                    count++;
                }
            }
        }
        return count;
    }

    // Main function. It controls the UI
    public static void main(String[] args) {
        System.out.print("\u000c"); // Clears the screen
        System.out.println("Instructions");
        System.out.println("This is the Game of Life. It is a game full of cells.");
        System.out.println("Each cell has 2 states: alive (#) and dead (.)");
        System.out.println("There are generations and in each generation, the following changes occur:");
        System.out.println("A cell stays alive if it has 2 or 3 cells around it.");
        System.out.println("A cell dies if it has less than 2 or more than 3 cells around it.");
        System.out.println("A cell becomes alive if it has 3 neighbors.");
        System.out.println("You have 4 options which are activated by typing a number:");
        System.out.println("    - Type 1 to skip to the next generation");
        System.out.println("    - Type 2 and then the cell coordinates to change a cell's state");
        System.out.println("    - Type 3 and then type the desired number to skip multiple generations");
        System.out.println("    - Type 4 to quit the game");
        Scanner scanner = new Scanner(System.in);
        
        int width = 0;
        int height = 0;
        final int maxInput = 10000; // Max input for width, height and skip generations varibles 
        
        while (width <= 0 || height <= 0 || width >= maxInput || height >= maxInput) {
            try { // Scans for errors and gets the width and height
                System.out.print("Enter the width of the game board: ");
                width = scanner.nextInt();

                System.out.print("Enter the height of the game board: ");
                height = scanner.nextInt();

                if (width <= 0 || height <= 0 || width >= maxInput || height >= maxInput) {
                    System.out.println("Invalid board dimensions! Please enter positive whole values smaller than 10000");
                }
            } catch (InputMismatchException e) {
                System.out.println("Invalid input! Please enter positive integer whole value for the board dimensions.");
                scanner.nextLine(); // Clear the invalid input from the scanner
            }
        }

        GameOfLife game = new GameOfLife(width, height);
        game.initializeRandom();
        game.display();

        int choice = 0;
        while (choice != 4) {
            System.out.println("\nMENU:");
            System.out.println("1. Next Generation");
            System.out.println("2. Toggle Cell State");
            System.out.println("3. Skip Generations");
            System.out.println("4. Quit");
            System.out.print("Enter your choice: ");

            try {
                choice = scanner.nextInt();
            } catch (InputMismatchException e) {
                System.out.println("Invalid choice! Please enter a numerical whole value between 1 & 4.");
                scanner.nextLine(); // Clear the invalid input from the scanner
                continue; // Go back to the start of the loop
            }

            switch (choice) {
                case 1: // Advances a generation
                    game.advanceGeneration();
                    game.display();
                    break;

                case 2: // Toggles cell on and off
                    System.out.print("Enter cell coordinates (x y): ");
                    int x;
                    try {
                        x = scanner.nextInt();
                        x--;
                    } catch (InputMismatchException e) {
                        System.out.println("Invalid choice! Please enter a numerical whole value within the board parameters.");
                        scanner.nextLine(); // Clear the invalid input from the scanner
                        continue; // Go back to the start of the loop

                    }
                    int y;
                    try {
                        y = scanner.nextInt();
                        y--;
                    } catch (InputMismatchException e) {
                        System.out.println("Invalid choice! Please enter a numerical whole value within the board parameters.");
                        scanner.nextLine(); // Clear the invalid input from the scanner
                        continue; // Go back to the start of the loop

                    }
                    game.toggleCellState(x, y);
                    game.display();
                    break;

                case 3: // For skipping multiple generations
                    System.out.print("Enter the number of generations to skip: ");
                    int numGenerations = 0;
                    while(numGenerations <= 0 || numGenerations >= maxInput){
                        try {
                            numGenerations = scanner.nextInt();
                            
                            if(numGenerations <= 0 || numGenerations >= maxInput){
                                System.out.println("Invalid choice! Please enter a positive numerical whole value smaller than " + maxInput + ".");
                            }
                        } catch (InputMismatchException e) {
                            System.out.println("Invalid choice! Please enter a positive numerical whole value smaller than 10000" + maxInput + ".");
                            scanner.nextLine(); // Clear the invalid input from the scanner
                            continue; // Go back to the start of the loop

                        }
                    }   
                    for (int i = 0; i < numGenerations; i++) {
                        game.advanceGeneration();
                    }
                    game.display();
                    break;

                case 4: // Quits the game
                    System.out.println("Quitting the game...");
                    break;

                default:
                    System.out.println("Invalid choice!");
            }
        }
    }
}
