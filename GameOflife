/**
 * This is the Game of Life. Each cell has a state: alive (#) or dead (.). 
 * The number of alive cells is randomly selected at the start of the game.
 * The state of the cells changes each generation. If an alive cell has 2 
 * or 3 alive cells next to it, it stays alive. If it has 1, 0, or 4 or more 
 * cells next to it, it will die. A dead cell comes alive when there are 3 alive
 * cells next to it.
 * 
 * Author: Zach Brough
 * Version: 14.5.2023
 */
import java.util.Random;
import java.util.Scanner;

public class GameOfLife {
    private int width; // Width of the board
    private int height; // Height of the board
    private boolean[][] cells; // Game board of the cells

    // Creates a 2-dimensional array representing the game board
    public GameOfLife(int width, int height) {
        this.width = width;
        this.height = height;
        cells = new boolean[width][height]; // Sets game board width and height
        
    }

    // Randomly generates cells at the start
    public void initializeRandom() {
        Random rand = new Random();
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                cells[x][y] = rand.nextBoolean();
            }
        }
    }

        // Prints the board
    public void display() {
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                System.out.print(cells[x][y] ? '#' : '.');
            }
            System.out.println();
        }
    }

        // Advances a generation
    public void advanceGeneration() {
        boolean[][] newCells = new boolean[width][height]; // Makes a new cells array
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                int liveNeighbors = countLiveNeighbors(x, y);
                if (cells[x][y]) {
                    // Cell is alive
                    if (liveNeighbors == 2 || liveNeighbors == 3) {
                        // Cell lives on
                        newCells[x][y] = true;
                    }
                } else {
                    // Cell is dead
                    if (liveNeighbors == 3) {
                        // Cell becomes alive
                        newCells[x][y] = true;
                    }
                }
            }
        }
        cells = newCells; // Copies newCells array into the normal cells array
    }

        // Counts live neighbors
    public int countLiveNeighbors(int x, int y) {
        int count = 0;
        for (int dx = -1; dx <= 1; dx++) { // dx scans the x-axis around the cells. dx means delta x because this measures the change between the 2 variables
            for (int dy = -1; dy <= 1; dy++) { // dy scans the y-axis around the cells.
                if (dx == 0 && dy == 0) {
                    // Ignore the current cell
                    continue;
                }
                int nx = x + dx; // Update the next x variable (nx)
                int ny = y + dy; // Update the next y variable (ny)
                if (nx >= 0 && nx < width && ny >= 0 && ny < height && cells[nx][ny]) { // Checks if cell is alive
                    count++;
                }
            }
        }
        return count;
    }
        // Main function. It controls the UI
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);
        
        int width = 0;
        int height = 0;
        
        while (width <= 0 || height <= 0) {
            width = scanner.nextInt();

            height = scanner.nextInt();

        }

        GameOfLife game = new GameOfLife(width, height);
        game.initializeRandom();
        game.display();
    }
}